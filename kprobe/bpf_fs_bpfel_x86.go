// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64
// +build 386 amd64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadBpf_fs returns the embedded CollectionSpec for bpf_fs.
func loadBpf_fs() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Bpf_fsBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bpf_fs: %w", err)
	}

	return spec, err
}

// loadBpf_fsObjects loads bpf_fs and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *bpf_fsObjects
//     *bpf_fsPrograms
//     *bpf_fsMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBpf_fsObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBpf_fs()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bpf_fsSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpf_fsSpecs struct {
	bpf_fsProgramSpecs
	bpf_fsMapSpecs
}

// bpf_fsSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpf_fsProgramSpecs struct {
	KprobeExecve *ebpf.ProgramSpec `ebpf:"kprobe_execve"`
}

// bpf_fsMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpf_fsMapSpecs struct {
	KprobeMap *ebpf.MapSpec `ebpf:"kprobe_map"`
}

// bpf_fsObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBpf_fsObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpf_fsObjects struct {
	bpf_fsPrograms
	bpf_fsMaps
}

func (o *bpf_fsObjects) Close() error {
	return _Bpf_fsClose(
		&o.bpf_fsPrograms,
		&o.bpf_fsMaps,
	)
}

// bpf_fsMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBpf_fsObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpf_fsMaps struct {
	KprobeMap *ebpf.Map `ebpf:"kprobe_map"`
}

func (m *bpf_fsMaps) Close() error {
	return _Bpf_fsClose(
		m.KprobeMap,
	)
}

// bpf_fsPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBpf_fsObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpf_fsPrograms struct {
	KprobeExecve *ebpf.Program `ebpf:"kprobe_execve"`
}

func (p *bpf_fsPrograms) Close() error {
	return _Bpf_fsClose(
		p.KprobeExecve,
	)
}

func _Bpf_fsClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed bpf_fs_bpfel_x86.o
var _Bpf_fsBytes []byte
