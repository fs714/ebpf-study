// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64
// +build 386 amd64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadExampleKprobe returns the embedded CollectionSpec for exampleKprobe.
func loadExampleKprobe() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ExampleKprobeBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load exampleKprobe: %w", err)
	}

	return spec, err
}

// loadExampleKprobeObjects loads exampleKprobe and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *exampleKprobeObjects
//     *exampleKprobePrograms
//     *exampleKprobeMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadExampleKprobeObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadExampleKprobe()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// exampleKprobeSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type exampleKprobeSpecs struct {
	exampleKprobeProgramSpecs
	exampleKprobeMapSpecs
}

// exampleKprobeSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type exampleKprobeProgramSpecs struct {
	KprobeExecve *ebpf.ProgramSpec `ebpf:"kprobe_execve"`
}

// exampleKprobeMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type exampleKprobeMapSpecs struct {
	KprobeMap *ebpf.MapSpec `ebpf:"kprobe_map"`
}

// exampleKprobeObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadExampleKprobeObjects or ebpf.CollectionSpec.LoadAndAssign.
type exampleKprobeObjects struct {
	exampleKprobePrograms
	exampleKprobeMaps
}

func (o *exampleKprobeObjects) Close() error {
	return _ExampleKprobeClose(
		&o.exampleKprobePrograms,
		&o.exampleKprobeMaps,
	)
}

// exampleKprobeMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadExampleKprobeObjects or ebpf.CollectionSpec.LoadAndAssign.
type exampleKprobeMaps struct {
	KprobeMap *ebpf.Map `ebpf:"kprobe_map"`
}

func (m *exampleKprobeMaps) Close() error {
	return _ExampleKprobeClose(
		m.KprobeMap,
	)
}

// exampleKprobePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadExampleKprobeObjects or ebpf.CollectionSpec.LoadAndAssign.
type exampleKprobePrograms struct {
	KprobeExecve *ebpf.Program `ebpf:"kprobe_execve"`
}

func (p *exampleKprobePrograms) Close() error {
	return _ExampleKprobeClose(
		p.KprobeExecve,
	)
}

func _ExampleKprobeClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed examplekprobe_bpfel_x86.o
var _ExampleKprobeBytes []byte
